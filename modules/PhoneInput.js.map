{"version":3,"sources":["../source/PhoneInput.js"],"names":["PureComponent","React","Component","PhoneNumberInput","reactLifecyclesCompat","props","value","labels","international","metadata","country","countries","countryOptions","isCountrySupportedWithError","undefined","filterCountries","filterCountryOptions","phoneNumber","pre_selected_country","filter","_","state","country_select_options","generateCountrySelectOptions","parsed_input","generateParsedInput","onCountryChange","selectedCountry","prevProps","prevState","name","disabled","disablePhoneInput","autoComplete","countrySelectTabIndex","showCountrySelect","style","className","inputClassName","getInputClassName","countrySelectAriaLabel","countrySelectProperties","error","indicateInvalid","CountrySelectComponent","countrySelectComponent","countrySelectProps","InputComponent","inputComponent","numberInputComponent","numberInputProps","ext","flags","flagComponent","flagsPath","internationalIcon","displayInitialValueAsLocalNumber","limitMaxLength","phoneNumberInputProps","hidePhoneInputField","isFocused","_countrySelectProps","key","hasOwnProperty","storeCountrySelectInstance","_onFocus","_onBlur","focus","onChange","onFocus","onBlur","onPhoneNumberKeyDown","invalid","cloneElement","event","parseExtDigits","hasUserSelectedACountry","old_default_country","old_value","new_default_country","new_value","new_state","parsedCountry","indexOf","propTypes","PropTypes","string","func","isRequired","onKeyDown","bool","arrayOf","labelsPropType","objectOf","elementType","number","object","node","metadataPropType","defaultProps","FlagComponent","InputBasic","new_country","old_parsed_input","old_country","new_parsed_input","setState","_input","input","_event","target","stopPropagation","preventDefault","hide","number_input","country_select","storePhoneNumberInputInstance","CountrySelectOptionIcon","createCountrySelectOptionIconComponent","transformCountryOptions","isCountrySupported","map","label","icon","InternationalIcon","options","transform","optionsOnTop","optionsOnBottom","appendTo","element","push","divider","index","option","splice","concat","console","isCountryOptionSupportedWithError","countryOption","length"],"mappings":";;;;;;;;;;;;;AAMA;;;AANA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AAGA;;;;AAEA;;;;AAEA;;AAOA;;AAaA;;;;;;;;;;;;AAEA;AACA,IAAMA,gBAAgBC,gBAAMD,aAAN,IAAuBC,gBAAMC,SAAnD;;IAGqBC,gB,OADpBC,+B;;;AA8cA,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA,kIACZA,KADY;;AAAA;;AAAA,oBAQd,MAAKA,KARS;AAAA,MAIjBC,KAJiB,eAIjBA,KAJiB;AAAA,MAKjBC,MALiB,eAKjBA,MALiB;AAAA,MAMjBC,aANiB,eAMjBA,aANiB;AAAA,MAOjBC,QAPiB,eAOjBA,QAPiB;AAAA,qBAcd,MAAKJ,KAdS;AAAA,MAWjBK,OAXiB,gBAWjBA,OAXiB;AAAA,MAYjBC,SAZiB,gBAYjBA,SAZiB;AAAA,MAajBC,cAbiB,gBAajBA,cAbiB;;AAgBlB;;AACA,MAAIF,OAAJ,EAAa;AACZ,OAAI,CAAC,MAAKG,2BAAL,CAAiCH,OAAjC,CAAL,EAAgD;AAC/CA,cAAUI,SAAV;AACA;AACD;;AAED;AACAH,cAAYI,gBAAgBJ,SAAhB,EAA2BF,QAA3B,CAAZ;;AAEA;AACAG,mBAAiBI,qBAAqBJ,cAArB,EAAqCH,QAArC,CAAjB;;AAEA,MAAMQ,cAAc,oCAAiBX,KAAjB,EAAwBG,QAAxB,CAApB;;AAEA,MAAMS,uBAAuB,yCAC5BD,WAD4B,EAE5BP,OAF4B,EAG5BC,aAAa,iCAAgBJ,MAAhB,EAAwBY,MAAxB,CAA+B;AAAA,UAAKC,MAAM,IAAN,IAAcX,SAASE,SAAT,CAAmBS,CAAnB,CAAnB;AAAA,GAA/B,CAHe,EAI5BZ,aAJ4B,EAK5BC,QAL4B,CAA7B;;AAQA,QAAKY,KAAL,GACA;AACC;AACAhB,UAAQ,MAAKA,KAFd;;AAIC;AACAK,YAAUQ,oBALX;;AAOC;AACA;AACA;AACA;AACA;AACA;AACAP,uBAbD;;AAeC;AACAW,2BAAyBC,6BAA6BZ,SAA7B,EAAwCC,cAAxC,EAAwD,MAAKP,KAA7D,CAhB1B;;AAkBC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAmB,iBAAeC,oBAAoBnB,KAApB,EAA2BW,WAA3B,EAAwC,MAAKZ,KAA7C,CA5BhB;;AA8BC;AACA;AACA;AACA;AACA;AACA;AACA;AACAC;AArCD,GADA;AAvCkB;AA+ElB;;;;sCAEmB;AAAA,OACXoB,eADW,GACS,KAAKrB,KADd,CACXqB,eADW;AAAA,OAEbhB,OAFa,GAED,KAAKL,KAFJ,CAEbK,OAFa;AAAA,OAGFiB,eAHE,GAGkB,KAAKN,KAHvB,CAGXX,OAHW;;;AAKnB,OAAIgB,eAAJ,EAAqB;AACpB,QAAI,CAAChB,OAAD,IAAY,CAAC,KAAKG,2BAAL,CAAiCH,OAAjC,CAAjB,EAA4D;AAC3DA,eAAUI,SAAV;AACA;AACD,QAAIa,oBAAoBjB,OAAxB,EAAiC;AAChCgB,qBAAgBC,eAAhB;AACA;AACD;AACD;;;qCAEkBC,S,EAAWC,S,EAAW;AAAA,OAChCH,eADgC,GACZ,KAAKrB,KADO,CAChCqB,eADgC;AAExC;;AACA,OAAIA,mBAAmB,KAAKL,KAAL,CAAWX,OAAX,KAAuBmB,UAAUnB,OAAxD,EAAiE;AAChEgB,oBAAgB,KAAKL,KAAL,CAAWX,OAA3B;AACA;AACD;;AAED;;;AAMA;;;AAyDA;;;AAkBA;;;;;;;AA8CA;;;AAGA;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA8BA;;;AAOA;;;;2BA2GA;AAAA,gBA2CG,KAAKL,KA3CR;AAAA,OAGEyB,IAHF,UAGEA,IAHF;AAAA,OAIEC,QAJF,UAIEA,QAJF;AAAA,OAKEC,iBALF,UAKEA,iBALF;AAAA,OAMEC,YANF,UAMEA,YANF;AAAA,OAOEC,qBAPF,UAOEA,qBAPF;AAAA,OAQEC,iBARF,UAQEA,iBARF;AAAA,OASEC,KATF,UASEA,KATF;AAAA,OAUEC,SAVF,UAUEA,SAVF;AAAA,OAWEC,cAXF,UAWEA,cAXF;AAAA,OAYEC,iBAZF,UAYEA,iBAZF;AAAA,OAaEC,sBAbF,UAaEA,sBAbF;AAAA,OAcEC,uBAdF,UAcEA,uBAdF;AAAA,OAgBEC,KAhBF,UAgBEA,KAhBF;AAAA,OAiBEC,eAjBF,UAiBEA,eAjBF;AAAA,OAmB0BC,sBAnB1B,UAmBEC,sBAnBF;AAAA,OAoBEC,kBApBF,UAoBEA,kBApBF;AAAA,OAqBkBC,cArBlB,UAqBEC,cArBF;AAAA,OAsBwBA,cAtBxB,UAsBEC,oBAtBF;AAAA,OAuBEC,gBAvBF,UAuBEA,gBAvBF;AAAA,OAyBEC,GAzBF,UAyBEA,GAzBF;AAAA,OA4BY/B,CA5BZ,UA4BEV,OA5BF;AAAA,OA6BEC,SA7BF,UA6BEA,SA7BF;AAAA,OA8BEC,cA9BF,UA8BEA,cA9BF;AAAA,OA+BEL,MA/BF,UA+BEA,MA/BF;AAAA,OAgCE6C,KAhCF,UAgCEA,KAhCF;AAAA,OAiCEC,aAjCF,UAiCEA,aAjCF;AAAA,OAkCEC,SAlCF,UAkCEA,SAlCF;AAAA,OAmCE9C,aAnCF,UAmCEA,aAnCF;AAAA,OAoCE+C,iBApCF,UAoCEA,iBApCF;AAAA,OAqCEC,gCArCF,UAqCEA,gCArCF;AAAA,OAsCE9B,eAtCF,UAsCEA,eAtCF;AAAA,OAuCE+B,cAvCF,UAuCEA,cAvCF;AAAA,OAwCEhD,QAxCF,UAwCEA,QAxCF;AAAA,OAyCKiD,qBAzCL;;AAAA,gBAqDG,KAAKrC,KArDR;AAAA,OA+CEX,OA/CF,UA+CEA,OA/CF;AAAA,OAgDEiD,mBAhDF,UAgDEA,mBAhDF;AAAA,OAiDErC,sBAjDF,UAiDEA,sBAjDF;AAAA,OAkDEE,YAlDF,UAkDEA,YAlDF;AAAA,OAmDEoC,SAnDF,UAmDEA,SAnDF;;AAuDC;;AAEA;AACA;;AACA,OAAMC,sBAAsB,EAA5B;AACA,OAAIpB,uBAAJ,EACA;AACC,SAAK,IAAMqB,GAAX,IAAkBrB,uBAAlB,EACA;AACC,SAAI,KAAKpC,KAAL,CAAW0D,cAAX,CAA0BD,GAA1B,CAAJ,EACA;AACCD,0BAAoBpB,wBAAwBqB,GAAxB,CAApB,IAAoD,KAAKzD,KAAL,CAAWyD,GAAX,CAApD;AACA,aAAOJ,sBAAsBI,GAAtB,CAAP;AACA;AACD;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UACC;AAAA;AAAA;AACC,YAAQ1B,KADT;AAEC,gBAAY,0BAAW,0BAAX,EACZ;AACC,yCAAsCwB,SADvC;AAEC,2CAAsClB,SAASC;AAFhD,MADY,EAKZN,SALY,CAFb;AAUC;AAAA;AAAA,OAAK,WAAU,+BAAf;AAGGF,0BACD,8BAAC,sBAAD,eACK0B,mBADL;AAEC,WAAM,KAAKG,0BAFZ;AAGC,YAAOlC,OAAUA,IAAV,iBAA4BhB,SAHpC;AAIC,oBAAa0B,0BAA0BjC,OAAOG,OAJ/C;AAKC,gBAAWwB;AALZ,QAMKY,kBANL;AAOC,aAAQpC,OAPT;AAQC,eAAUY,sBARX;AASC,gBAAW,KAAKI,eATjB;AAUC,eAAU,KAAKuC,QAVhB;AAWC,cAAS,KAAKC,OAXf;AAYC,gBAAWnC,QAZZ;AAaC,2BAAsB,KAAK4B,mBAb5B;AAcC,4BAAuB,KAAKQ,KAd7B;AAeC,iBAAU,mCAfX,IAJF;AAuBG,MAACR,mBAAD,IACD,8BAAC,cAAD;AACC,YAAK,KADN;AAEC,oBAAe1B;AAFhB,QAGKiB,gBAHL,EAIKQ,qBAJL;AAKC,YAAO5B,IALR;AAMC,gBAAWrB,QANZ;AAOC,eAAUC,OAPX;AAQC,aAAQc,gBAAgB,EARzB;AASC,gBAAW,KAAK4C,QATjB;AAUC,eAAU,KAAKC,OAVhB;AAWC,cAAS,KAAKC,MAXf;AAYC,iBAAY,KAAKC,oBAZlB;AAaC,gBAAWxC,YAAYC,iBAbxB;AAcC,sBAAiBgB,cAdlB;AAeC,iBAAY,0BAEX,iCAFW,EAGX,iCAHW,EAIX;AACC,oDAA8CjB,YAAYC,iBAD3D;AAEC,mDAA8CU,SAASC;AAFxD,OAJW,EAQXL,cARW,EASXC,qBAAqBA,kBAAkB;AACtCR,iBAAUA,YAAYC,iBADgB;AAEtCwC,gBAAS9B,SAASC;AAFoB,OAAlB,CATV,CAfb,IAxBF;AAwDGQ,YAAO,CAACQ,mBAAR,IACD;AAAA;AAAA,QAAO,WAAU,+BAAjB;AACEpD,aAAO4C,GADT;AAEElD,sBAAMwE,YAAN,CAAmBtB,GAAnB,EACD;AACCiB,iBAAWjB,IAAI9C,KAAJ,CAAU+D,QAAV,GAAqB,UAACM,KAAD;AAAA,eAAWvB,IAAI9C,KAAJ,CAAU+D,QAAV,CAAmBO,eAAeD,KAAf,CAAnB,CAAX;AAAA,QAArB,GAA4E5D,SADxF;AAECuD,gBAAU,KAAKJ,QAFhB;AAGCK,eAAS,KAAKJ,OAHf;AAIC7B,kBAAY,0BAEX,iCAFW,EAGX,qCAHW,EAIX;AACC,qDAA8CN,YAAYC;AAD3D,QAJW,EAOXM,cAPW,EAQXC,qBAAqBA,kBAAkB;AACtCR,kBAAUA,YAAYC;AADgB,QAAlB,CARV,EAWXmB,IAAI9C,KAAJ,CAAUgC,SAXC;AAJb,OADC;AAFF;AAzDF,KAVD;AA6FGK,aAASC,eAAT,IACD;AAAA;AAAA,OAAK,WAAU,iCAAf;AACGD;AADH;AA9FF,IADD;AAqGA;;;;;AAzRD;AACA;AACA;AACA;AACA;2CACgCrC,K,EAAOgB,K,EAAO;AAAA,OAE5CX,OAF4C,GASzCW,KATyC,CAE5CX,OAF4C;AAAA,OAG5CkE,uBAH4C,GASzCvD,KATyC,CAG5CuD,uBAH4C;AAAA,OAI5CtE,KAJ4C,GASzCe,KATyC,CAI5Cf,KAJ4C;AAAA,sBASzCe,KATyC,CAK5ChB,KAL4C;AAAA,OAMjCwE,mBANiC,gBAM3CnE,OAN2C;AAAA,OAOjCoE,SAPiC,gBAO3CxE,KAP2C;AAAA,OAY5CG,QAZ4C,GAgBzCJ,KAhByC,CAY5CI,QAZ4C;AAAA,OAa5CE,SAb4C,GAgBzCN,KAhByC,CAa5CM,SAb4C;AAAA,OAclCoE,mBAdkC,GAgBzC1E,KAhByC,CAc5CK,OAd4C;AAAA,OAelCsE,SAfkC,GAgBzC3E,KAhByC,CAe5CC,KAf4C;;;AAkB7C,OAAM2E,YAAY;AACjB;AACA5E,gBAFiB;AAGjB;AACA;AACA;AACA;AACAuE;;AAGD;AACA;AAXkB,IAAlB,CAYA,IAAIvE,MAAMM,SAAN,KAAoBU,MAAMhB,KAAN,CAAYM,SAAhC,IACHN,MAAME,MAAN,KAAiBc,MAAMhB,KAAN,CAAYE,MAD1B,IAEHF,MAAMG,aAAN,KAAwBa,MAAMhB,KAAN,CAAYG,aAFrC,EAEoD;AACnD;AACAyE,cAAU3D,sBAAV,GAAmCC,6BAClCR,gBAAgBV,MAAMM,SAAtB,EAAiCF,QAAjC,CADkC,EAElCO,qBAAqBX,MAAMO,cAA3B,EAA2CH,QAA3C,CAFkC,EAGlCJ,KAHkC,CAAnC;AAKA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAI0E,wBAAwBF,mBAAxB,IACH,CAACD,uBADE,IACyB,CAACtE,KAD1B,IACmC,CAAC0E,SADxC,EACmD;AAClD,wBACIC,SADJ;AAECvE,cAASG,4BAA4BkE,mBAA5B,EAAiDtE,QAAjD,IAA6DsE,mBAA7D,GAAmFF;AAC5F;AACA;AAJD;AAMA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA,QAoBK,IAAIG,cAAcF,SAAd,IAA2BE,cAAc1E,KAA7C,EAAoD;AACxD,SAAMW,cAAc,oCAAiB+D,SAAjB,EAA4BvE,QAA5B,CAApB;AACA,SAAIyE,sBAAJ;AACA,SAAIjE,WAAJ,EAAiB;AAChB,UAAMN,aAAYI,gBAAgBV,MAAMM,SAAtB,EAAiCF,QAAjC,CAAlB;AACA,UAAI,CAACE,UAAD,IAAcA,WAAUwE,OAAV,CAAkBlE,YAAYP,OAA9B,KAA0C,CAA5D,EAA+D;AAC9DwE,uBAAgBjE,YAAYP,OAA5B;AACA;AACD;AACD,yBACIuE,SADJ;AAECzD,oBAAeC,oBAAoBuD,SAApB,EAA+B/D,WAA/B,EAA4CZ,KAA5C,CAFhB;AAGCC,aAAQ0E,SAHT;AAICtE,eAAUsE,YAAYE,aAAZ,GAA4BxE;AAJvC;AAMA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,UAAOuE,SAAP;AACA;;;;EAv1B4CjF,a,WAEtCoF,S,GACP;AACC;;;;;;;AAOA9E,QAAQ+E,oBAAUC,MARnB;;AAUC;;;AAGAlB,WAAWiB,oBAAUE,IAAV,CAAeC,UAb3B;;AAeC;;;;AAIAnB,UAAUgB,oBAAUE,IAnBrB;;AAqBC;;;;AAIAjB,SAASe,oBAAUE,IAzBpB;;AA2BC;;;;AAIAE,YAAYJ,oBAAUE,IA/BvB;;AAiCC;;;;AAIA;AACAxD,WAAWsD,oBAAUK,IAAV,CAAeF,UAtC3B;;AAwCC;;;;;;;;;;;;;;;;;;;AAmBA;AACAvD,eAAeoD,oBAAUC,MAAV,CAAiBE,UA5DjC;;AA8DC;;;;;;;;;;;;;;;;;;;AAmBA;AACAhC,mCAAmC6B,oBAAUK,IAAV,CAAeF,UAlFnD;;AAoFC;;;;;;AAMA;AACA9E,UAAU2E,oBAAUC,MA3FrB;;AA6FC;;;;;;;AAOA3E,YAAY0E,oBAAUM,OAAV,CAAkBN,oBAAUC,MAA5B,CApGb;;AAsGC;;;;;;;;;;AAUA/E,SAASqF,kBAAeJ,UAhHzB;;AAkHC;;;;;;;;;;;;;;;AAeAlC,YAAY+B,oBAAUC,MAAV,CAAiBE,UAjI9B;;AAmIC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCApC,QAAQiC,oBAAUQ,QAAV,CAAmBR,oBAAUS,WAA7B,CAvKT;;AAyKC;;;;;;;;;AASAzC,gBAAgBgC,oBAAUS,WAAV,CAAsBN,UAlLvC;;AAoLC;;;AAGAhF,gBAAgB6E,oBAAUK,IAAV,CAAeF,UAvLhC;;AAyLC;;;AAGAjC,oBAAoB8B,oBAAUS,WAAV,CAAsBN,UA5L3C;;AA8LC;;;AAGA;AACArD,oBAAoBkD,oBAAUK,IAAV,CAAeF,UAlMpC;;AAoMC;;;AAGAtD,wBAAwBmD,oBAAUU,MAvMnC;;AAyMC;;;;;AAKAvD,yBAAyB6C,oBAAUC,MA9MpC;;AAgNC;;;;;;;;;;AAUA1E,iBAAiByE,oBAAUM,OAAV,CAAkBN,oBAAUC,MAA5B,CA1NlB;;AA4NC;;;AAGAlD,QAAQiD,oBAAUW,MA/NnB;;AAiOC;;;AAGA3D,YAAYgD,oBAAUC,MApOvB;;AAsOC;;;AAGAhD,iBAAiB+C,oBAAUC,MAzO5B;;AA2OC;;;;;AAKA/C,oBAAoB8C,oBAAUE,IAhP/B;;AAkPC;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA1C,yBAAyBwC,oBAAUS,WAAV,CAAsBN,UAtQhD;;AAwQC;;;AAGA1C,qBAAoBuC,oBAAUW,MA3Q/B;;AA6QC;;;;;;;;;;;;;AAaA/C,uBAAuBoC,oBAAUS,WAAV,CAAsBN,UA1R9C;;AA4RC;;;AAGAtC,mBAAkBmC,oBAAUW,MA/R7B;;AAiSC;;;;;;;;;;;;;;;;;;AAkBAhD,iBAAiBqC,oBAAUS,WAAV,CAAsBN,UAnTxC;;AAqTC;;;;AAIA;AACA;;AAEA;;;;;;;AAOArC,MAAMkC,oBAAUY,IAnUjB;;AAqUC;;;;AAIAxC,iBAAiB4B,oBAAUK,IAAV,CAAeF,UAzUjC;;AA2UC;;;AAGA9C,QAAQ2C,oBAAUC,MA9UnB;;AAgVC;;;;;;AAMA3C,kBAAkB0C,oBAAUK,IAtV7B;;AAwVC;;;;;;AAMAjF,WAAWyF,oBAAiBV,UA9V7B;;AAgWC;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9D,kBAAkB2D,oBAAUE,IA5W7B;;AA8WC;;;;;;;AAOA;AACA;AACAvD,oBAAoBqD,oBAAUK,IAAV,CAAeF;AAvXpC,C,UA0XOW,Y,GACP;AACC;;;AAGApE,WAAU,KAJX;AAKCC,oBAAmB,KALpB;;AAOC;;;;AAIAW,kBAAkB,IAXnB;;AAaC;;;AAGAV,eAAc,KAhBf;;AAkBC;;;AAGAoB,gBAAe+C,cArBhB;;AAuBC;;;AAGA9C,YAAW,kDA1BZ;;AA4BC;;;AAGC;;AAED;;;AAGAL,uBAAsB,OApCvB;;AAsCC;;;AAGAD,iBAAgBqD,oBAzCjB;;AA2CC;;;AAGAlE,oBAAmB,IA9CpB;;AAgDC;;;;;;;;;AASAqB,mCAAkC,KAzDnC;;AA2DC;;;;;AAKA;;AAEA;;;;AAIAhD,gBAAgB,IAtEjB;;AAwEC;;;;AAIAiD,iBAAiB;AA5ElB,C;;;MAwLA5C,2B,GAA8B,UAACH,OAAD,EAAa;AAAA,MAClCD,QADkC,GACrB,OAAKJ,KADgB,CAClCI,QADkC;;AAE1C,SAAOI,4BAA4BH,OAA5B,EAAqCD,QAArC,CAAP;AACA,E;;MAGDiB,e,GAAkB,UAAC4E,WAAD,EAClB;AAAA,gBAMG,OAAKjG,KANR;AAAA,MAGEI,QAHF,WAGEA,QAHF;AAAA,MAIE2D,QAJF,WAIEA,QAJF;AAAA,gBAaG,OAAK/C,KAbR;AAAA,MAUiBkF,gBAVjB,WAUE/E,YAVF;AAAA,MAWiBgF,WAXjB,WAWE9F,OAXF;;AAeC;AACA;AACA;;AACA,MAAM+F,mBAAmB,mDAExBF,gBAFwB,EAGxBC,WAHwB,EAIxBF,WAJwB,EAKxB7F,QALwB;AAMxB;AACA,MAPwB,CAAzB;;AAUA,MAAMuE,YAAY,wBAAKyB,gBAAL,EAAuBH,WAAvB,EAAoC7F,QAApC,CAAlB;;AAEA;AACA,SAAK0D,KAAL;;AAEA;AACA;AACA;AACA;;AAEA,SAAKuC,QAAL,CACC;AACAhG,YAAU4F,WADV;AAEA1B,4BAA0B,IAF1B;AAGApD,iBAAeiF,gBAHf;AAIAnG,UAAQ0E;AAJR,GADD,EAOA,YACA;AACC;AACA;AACA;AACA;AACAZ,YAASY,SAAT;AACA,GAdD;AAeA,E;;MAGDT,oB,GAAuB,UAACG,KAAD,EACvB;AAAA,MACSe,SADT,GACuB,OAAKpF,KAD5B,CACSoF,SADT;;AAGC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIA,SAAJ,EAAe;AACdA,aAAUf,KAAV;AACA;AACD,E;;MAODN,Q,GAAW,UAACuC,MAAD,EACX;AAAA,gBAQG,OAAKtG,KARR;AAAA,MAGE+D,QAHF,WAGEA,QAHF;AAAA,MAIE5D,aAJF,WAIEA,aAJF;AAAA,MAKEiD,cALF,WAKEA,cALF;AAAA,MAMEhD,QANF,WAMEA,QANF;;AAAA,oBAgBG,8BAEDkG,MAFC,EAGD,OAAKtF,KAAL,CAAWG,YAHV,EAID,OAAKH,KAAL,CAAWX,OAJV,EAKD,OAAKW,KAAL,CAAWV,SALV,EAMDH,aANC,EAODiD,cAPC,EAQDhD,QARC,CAhBH;AAAA,MAYEmG,KAZF,eAYEA,KAZF;AAAA,MAaElG,OAbF,eAaEA,OAbF;AAAA,MAcEJ,KAdF,eAcEA,KAdF;;AA2BC,SAAKoG,QAAL,CACC;AACAlF,iBAAcoF,KADd;AAEAtG,eAFA;AAGAI;AAHA,GADD;AAMA;AACA;AACA;AACA;AACA;AAAA,UAAM0D,SAAS9D,KAAT,CAAN;AAAA,GAVA;AAWA,E;;MAGD2D,Q,GAAW;AAAA,SAAM,OAAKyC,QAAL,CAAc,EAAE9C,WAAW,IAAb,EAAd,CAAN;AAAA,E;;MAGXM,O,GAAU;AAAA,SAAM,OAAKwC,QAAL,CAAc,EAAE9C,WAAW,KAAb,EAAd,CAAN;AAAA,E;;MAEVS,O,GAAU,UAACK,KAAD,EAAW;AAAA,MACZL,OADY,GACA,OAAKhE,KADL,CACZgE,OADY;;AAEpB,SAAKJ,QAAL;AACA,MAAII,OAAJ,EAAa;AACZA,WAAQK,KAAR;AACA;AACD,E;;MAWDJ,M,GAAS,UAACI,KAAD,EACT;AAAA,MACSJ,MADT,GACoB,OAAKjE,KADzB,CACSiE,MADT;AAAA,MAEShE,KAFT,GAEmB,OAAKe,KAFxB,CAESf,KAFT;;;AAIC,SAAK4D,OAAL;;AAEA,MAAI,CAACI,MAAL,EAAa;AACZ;AACA;;AAED;AACA;AACA,MAAMuC,sBACFnC,KADE;AAELoC,wBACIpC,MAAMoC,MADV;AAECxG;AAFD;;AAMD;AACA;AATM,IAAN,CAUAuG,OAAOE,eAAP,GAAyBrC,MAAMqC,eAA/B;AACAF,SAAOG,cAAP,GAAyBtC,MAAMsC,cAA/B;;AAEA,SAAO1C,OAAOuC,MAAP,CAAP;AACA,E;;MAGDlD,mB,GAAsB,UAACsD,IAAD,EAAU;AAC/B,SAAKP,QAAL,CAAc;AACb/C,wBAAqBsD;AADR,GAAd;AAGA,E;;MAGD9C,K,GAAQ;AAAA,SAAM,OAAK+C,YAAL,CAAkB/C,KAAlB,EAAN;AAAA,E;;MAERH,0B,GAA6B;AAAA,SAAK,OAAKmD,cAAL,GAAsB/F,CAA3B;AAAA,E;;MAE7BgG,6B,GAAgC;AAAA,SAAK,OAAKF,YAAL,GAAoB9F,CAAzB;AAAA,E;;;AA8RjC;;;kBAlhCqBjB,gB;AAmhCrB,SAASoB,4BAAT,CAAsCZ,SAAtC,EAAiDC,cAAjD,EAAiEP,KAAjE,EAAwE;AAAA,KAEtEE,MAFsE,GAKnEF,KALmE,CAEtEE,MAFsE;AAAA,KAGtEC,aAHsE,GAKnEH,KALmE,CAGtEG,aAHsE;AAAA,KAItEC,QAJsE,GAKnEJ,KALmE,CAItEI,QAJsE;;;AAOvE,KAAM4G,0BAA0BC,uCAAuCjH,KAAvC,CAAhC;;AAEA,QAAOkH,wBACN,2CACC5G,aAAa,iCAAgBJ,MAAhB,EAAwBY,MAAxB,CAA+B;AAAA,SAAWT,YAAY,IAAZ,IAAoB8G,mBAAmB9G,OAAnB,EAA4BD,QAA5B,CAA/B;AAAA,EAA/B,CADd,EAECF,MAFD,EAGCC,aAHD,EAIEiH,GAJF,CAIM;AAAA,MAAGnH,KAAH,QAAGA,KAAH;AAAA,MAAUoH,KAAV,QAAUA,KAAV;AAAA,SAAuB;AAC5BpH,eAD4B;AAE5BoH,eAF4B;AAG5BC,SAAMN;AAHsB,GAAvB;AAAA,EAJN,CADM,EAUNzG,cAVM,CAAP;AAYA;;AAED,SAAS0G,sCAAT,CAAgDjH,KAAhD,EACA;AAAA,KAGE+C,KAHF,GAQG/C,KARH,CAGE+C,KAHF;AAAA,KAIEE,SAJF,GAQGjD,KARH,CAIEiD,SAJF;AAAA,KAKkB8C,aALlB,GAQG/F,KARH,CAKEgD,aALF;AAAA,KAMsBuE,iBANtB,GAQGvH,KARH,CAMEkD,iBANF;;;AAUC,QAAO;AAAA,MAAGjD,KAAH,SAAGA,KAAH;AAAA,SACN;AAAA;AAAA;AACC,eAAW,0BAAW,gCAAX,EACX;AACC,sDAAiDA,UAAUQ;AAD5D,KADW,CADZ;AAMER,WAEA,8BAAC,aAAD;AACC,aAASA,KADV;AAEC,WAAO8C,KAFR;AAGC,eAAWE,SAHZ,GAFA,GAOA,8BAAC,iBAAD;AAbF,GADM;AAAA,EAAP;AAkBA;;AAED;AACA;AACA;AACA,SAASiE,uBAAT,CAAiCM,OAAjC,EAA0CC,SAA1C,EACA;AACC,KAAI,CAACA,SAAL,EAAgB;AACf,SAAOD,OAAP;AACA;;AAED,KAAME,eAAe,EAArB;AACA,KAAMC,kBAAkB,EAAxB;AACA,KAAIC,WAAWF,YAAf;;AAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,MASYG,OATZ;;AAWE,MAAIA,YAAY,GAAhB,EACA;AACCD,YAASE,IAAT,CAAc,EAAEC,SAAS,IAAX,EAAd;AACA,GAHD,MAIK,IAAIF,YAAY,KAAZ,IAAqBA,YAAY,GAArC,EACL;AACCD,cAAWD,eAAX;AACA,GAHI,MAKL;AACC;AACA,OAAMK,QAAQR,QAAQ1C,OAAR,CAAgB0C,QAAQ1G,MAAR,CAAe;AAAA,WAAUmH,OAAOhI,KAAP,KAAiB4H,OAA3B;AAAA,IAAf,EAAmD,CAAnD,CAAhB,CAAd;AACA;AACA,OAAMI,SAAST,QAAQQ,KAAR,CAAf;AACA;AACAR,WAAQU,MAAR,CAAeF,KAAf,EAAsB,CAAtB;AACA;AACAJ,YAASE,IAAT,CAAcG,MAAd;AACA;AA7BH;;AASC,sBAAsBR,SAAtB,kHACA;AAAA;;AAAA;;AAAA;AAoBC;;AAED,QAAOC,aAAaS,MAAb,CAAoBX,OAApB,EAA6BW,MAA7B,CAAoCR,eAApC,CAAP;AACA;;AAED,SAASvG,mBAAT,CAA6BnB,KAA7B,EAAoCW,WAApC,EAAiDZ,KAAjD,EACA;AAAA,KACSmD,gCADT,GAC8CnD,KAD9C,CACSmD,gCADT;;AAGC;AACA;AACA;AACA;AACA;AACA;;AACA,KAAIA,oCAAoCvC,WAApC,IAAmDA,YAAYP,OAAnE,EAA4E;AAC3E,SAAO,gDAA6BO,WAA7B,CAAP;AACA;;AAED,QAAOX,KAAP;AACA;;AAED,SAASkH,kBAAT,CAA4B9G,OAA5B,EAAqCD,QAArC,EAA+C;AAC9C,QAAOA,SAASE,SAAT,CAAmBoD,cAAnB,CAAkCrD,OAAlC,CAAP;AACA;;AAED,SAASG,2BAAT,CAAqCH,OAArC,EAA8CD,QAA9C,EAAwD;AACvD,KAAI+G,mBAAmB9G,OAAnB,EAA4BD,QAA5B,CAAJ,EAA2C;AAC1C,SAAO,IAAP;AACA,EAFD,MAEO;AACNgI,UAAQ/F,KAAR,yBAAoChC,OAApC;AACA,SAAO,KAAP;AACA;AACD;;AAED,SAASgI,iCAAT,CAA2CC,aAA3C,EAA0DlI,QAA1D,EAAoE;AACnE,SAAQkI,aAAR;AACC,OAAK,GAAL;AACA,OAAK,KAAL;AACA,OAAK,GAAL;AACC,UAAO,IAAP;AACD;AACC,UAAO9H,4BAA4B8H,aAA5B,EAA2ClI,QAA3C,CAAP;AANF;AAQA;;AAED,SAASM,eAAT,CAAyBJ,SAAzB,EAAoCF,QAApC,EAA8C;AAC7C,KAAIE,SAAJ,EAAe;AACdA,cAAYA,UAAUQ,MAAV,CAAiB;AAAA,UAAWN,4BAA4BH,OAA5B,EAAqCD,QAArC,CAAX;AAAA,GAAjB,CAAZ;AACA,MAAIE,UAAUiI,MAAV,KAAqB,CAAzB,EAA4B;AAC3BjI,eAAYG,SAAZ;AACA;AACD;AACD,QAAOH,SAAP;AACA;;AAED,SAASK,oBAAT,CAA8BJ,cAA9B,EAA8CH,QAA9C,EAAwD;AACvD,KAAIG,cAAJ,EAAoB;AACnBA,mBAAiBA,eAAeO,MAAf,CAAsB;AAAA,UAAiBuH,kCAAkCC,aAAlC,EAAiDlI,QAAjD,CAAjB;AAAA,GAAtB,CAAjB;AACA,MAAIG,eAAegI,MAAf,KAA0B,CAA9B,EAAiC;AAChChI,oBAAiBE,SAAjB;AACA;AACD;AACD,QAAOF,cAAP;AACA;;AAED,SAAS+D,cAAT,CAAwBD,KAAxB,EAA+B;AAC9B,KAAIA,KAAJ,EAAW;AACV,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC9BA,WAAQ,uBAAYA,KAAZ,CAAR;AACA,GAFD,MAEO,IAAIA,MAAMoC,MAAN,IAAgBpC,MAAMoC,MAAN,CAAaxG,KAAjC,EAAwC;AAC9CoE,SAAMoC,MAAN,CAAaxG,KAAb,GAAqB,uBAAYoE,MAAMoC,MAAN,CAAaxG,KAAzB,CAArB;AACA;AACD;AACD,QAAOoE,KAAP;AACA","file":"PhoneInput.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\nimport { parseDigits } from 'libphonenumber-js/core'\n\n// import InputSmart from './InputSmart'\nimport InputBasic from './InputBasic'\n\nimport FlagComponent from './Flag'\n\nimport\n{\n\tmetadata as metadataPropType,\n\tlabels as labelsPropType\n}\nfrom './PropTypes'\n\nimport\n{\n\tgetPreSelectedCountry,\n\tgetCountrySelectOptions,\n\tparsePhoneNumber,\n\tgenerateNationalNumberDigits,\n\tmigrateParsedInputForNewCountry,\n\tgetCountryForPartialE164Number,\n\tparseInput,\n\te164\n}\nfrom './input-control'\n\nimport { getCountryCodes } from './countries'\n\n// `PureComponent` is only available in React >= 15.3.0.\nconst PureComponent = React.PureComponent || React.Component\n\n@reactLifecyclesCompat\nexport default class PhoneNumberInput extends PureComponent\n{\n\tstatic propTypes =\n\t{\n\t\t/**\n\t\t * Phone number in `E.164` format.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * `\"+12223333333\"`\n\t\t */\n\t\tvalue : PropTypes.string,\n\n\t\t/**\n\t\t * Updates the `value` as the user inputs the phone number.\n\t\t */\n\t\tonChange : PropTypes.func.isRequired,\n\n\t\t/**\n\t\t * Toggles the `--focus` CSS class.\n\t\t * @ignore\n\t\t */\n\t\tonFocus : PropTypes.func,\n\n\t\t/**\n\t\t * `onBlur` is usually passed by `redux-form`.\n\t\t * @ignore\n\t\t */\n\t\tonBlur : PropTypes.func,\n\n\t\t/**\n\t\t * `onKeyDown` handler (e.g. to handle Enter key press).\n\t\t * @ignore\n\t\t */\n\t\tonKeyDown : PropTypes.func,\n\n\t\t/**\n\t\t * Disables both the phone number `<input/>`\n\t\t * and the country `<select/>`.\n\t\t */\n\t\t// (is `false` by default)\n\t\tdisabled : PropTypes.bool.isRequired,\n\n\t\t/**\n\t\t * Sets `autoComplete` property for phone number `<input/>`.\n\t\t *\n\t\t * Web browser's \"autocomplete\" feature\n\t\t * remembers the phone number being input\n\t\t * and can also autofill the `<input/>`\n\t\t * with previously remembered phone numbers.\n\t\t *\n\t\t * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\n\t\t *\n\t\t * For example, can be used to turn it off:\n\t\t *\n\t\t * \"So when should you use `autocomplete=\"off\"`?\n\t\t *  One example is when you've implemented your own version\n\t\t *  of autocomplete for search. Another example is any form field\n\t\t *  where users will input and submit different kinds of information\n\t\t *  where it would not be useful to have the browser remember\n\t\t *  what was submitted previously\".\n\t\t */\n\t\t// (is `\"tel\"` by default)\n\t\tautoComplete : PropTypes.string.isRequired,\n\n\t\t/**\n\t\t * Set to `true` to show the initial `value` in\n\t\t * \"national\" format rather than \"international\".\n\t\t *\n\t\t * For example, if this flag is set to `true`\n\t\t * and the initial `value=\"+12133734253\"` is passed\n\t\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\n\t\t *\n\t\t * By default, this flag is set to `false`,\n\t\t * meaning that if the initial `value=\"+12133734253\"` is passed\n\t\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\n\t\t *\n\t\t * The reason for such default behaviour is that\n\t\t * the newer generation grows up when there are no stationary phones\n\t\t * and therefore everyone inputs phone numbers in international format\n\t\t * in their smartphones so people gradually get more accustomed to\n\t\t * writing phone numbers in international format rather than in local format.\n\t\t * Future people won't be using \"national\" format, only \"international\".\n\t\t */\n\t\t// (is `false` by default)\n\t\tdisplayInitialValueAsLocalNumber : PropTypes.bool.isRequired,\n\n\t\t/**\n\t\t * The country to be selected by default.\n\t\t * For example, can be set after a GeoIP lookup.\n\t\t *\n\t\t * Example: `\"US\"`.\n\t\t */\n\t\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\n\t\tcountry : PropTypes.string,\n\n\t\t/**\n\t\t * If specified, only these countries will be available for selection.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * `[\"RU\", \"UA\", \"KZ\"]`\n\t\t */\n\t\tcountries : PropTypes.arrayOf(PropTypes.string),\n\n\t\t/**\n\t\t * Custom country `<select/>` option names.\n\t\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\n\t\t *\n\t\t * See the `locales` directory for examples.\n\t\t */\n\t\tlabels : labelsPropType.isRequired,\n\n\t\t/**\n\t\t * The base URL path for country flag icons.\n\t\t * By default it loads country flag icons from\n\t\t * `flag-icon-css` repo github pages website.\n\t\t * I imagine someone might want to download\n\t\t * those country flag icons and host them\n\t\t * on their own servers instead.\n\t\t * Warning: in future new countries can be added\n\t\t * to the country select which would result in\n\t\t * \"Image not found\" errors when using custom `flagsPath`\n\t\t * due to the custom-hosted flags bundle being outdated\n\t\t * and missing the new flags.\n\t\t * So if using custom `flagsPath` always check `CHANGELOG.md`\n\t\t * for new country announcements before updating this library.\n\t\t */\n\t\tflagsPath : PropTypes.string.isRequired,\n\n\t\t/**\n\t\t * Custom country flag icon components.\n\t\t * These flags replace the default ones.\n\t\t *\n\t\t * The shape is an object where keys are country codes\n\t\t * and values are flag icon components.\n\t\t * Flag icon components receive the same properties\n\t\t * as `flagComponent` (see below).\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * `{ \"RU\": () => <img src=\"...\"/> }`\n\t\t *\n\t\t * Can be used to replace the default flags\n\t\t * with custom ones for certain (or all) countries.\n\t\t *\n\t\t * Can also be used to bundle `<svg/>` flags instead of `<img/>`s:\n\t\t *\n\t\t * By default flag icons are inserted as `<img/>`s\n\t\t * with their `src` pointed to `flag-icon-css` repo github pages website.\n\t\t *\n\t\t * There might be some cases\n\t\t * (e.g. a standalone \"native\" app, or an \"intranet\" web application)\n\t\t * when including the full set of `<svg/>` country flags (3 megabytes)\n\t\t * is more appropriate than downloading them individually at runtime only if needed.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * `// Uses <svg/> flags (3 megabytes):`\n\t\t *\n\t\t * `import flags from 'react-phone-number-input/flags'`\n\t\t *\n\t\t * `import PhoneInput from 'react-phone-number-input'`\n\t\t *\n\t\t * `<PhoneInput flags={flags} .../>`\n\t\t */\n\t\tflags : PropTypes.objectOf(PropTypes.elementType),\n\n\t\t/**\n\t\t * Country flag icon component.\n\t\t *\n\t\t * Takes properties:\n\t\t *\n\t\t * * country : string — The country code.\n\t\t * * flagsPath : string — The `flagsPath` property (see above).\n\t\t * * flags : object — The `flags` property (see above).\n\t\t */\n\t\tflagComponent : PropTypes.elementType.isRequired,\n\n\t\t/**\n\t\t * Set to `false` to drop the \"International\" option from country `<select/>`.\n\t\t */\n\t\tinternational : PropTypes.bool.isRequired,\n\n\t\t/**\n\t\t * Custom \"International\" country `<select/>` option icon.\n\t\t */\n\t\tinternationalIcon : PropTypes.elementType.isRequired,\n\n\t\t/**\n\t\t * Set to `false` to hide country `<select/>`.\n\t\t */\n\t\t// (is `true` by default)\n\t\tshowCountrySelect : PropTypes.bool.isRequired,\n\n\t\t/**\n\t\t * HTML `tabindex` attribute for country `<select/>`.\n\t\t */\n\t\tcountrySelectTabIndex : PropTypes.number,\n\n\t\t/**\n\t\t * HTML `aria-label` attribute for country `<select/>`.\n\t\t * The default is `.country` of the `labels` property\n\t\t * which is `\"Country\"` for the default `labels`.\n\t\t */\n\t\tcountrySelectAriaLabel : PropTypes.string,\n\n\t\t/**\n\t\t * Can be used to place some countries on top of the list of country `<select/>` options.\n\t\t *\n\t\t * * `\"|\"` — inserts a separator.\n\t\t * * `\"...\"` — means \"the rest of the countries\" (can be omitted).\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\n\t\t */\n\t\tcountryOptions : PropTypes.arrayOf(PropTypes.string),\n\n\t\t/**\n\t\t * `<Phone/>` component CSS style object.\n\t\t */\n\t\tstyle : PropTypes.object,\n\n\t\t/**\n\t\t * `<Phone/>` component CSS class.\n\t\t */\n\t\tclassName : PropTypes.string,\n\n\t\t/**\n\t\t * Phone number `<input/>` CSS class.\n\t\t */\n\t\tinputClassName : PropTypes.string,\n\n\t\t/**\n\t\t * Returns phone number `<input/>` CSS class string.\n\t\t * Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\n\t\t * @ignore\n\t\t */\n\t\tgetInputClassName : PropTypes.func,\n\n\t\t/**\n\t\t * Country `<select/>` component.\n\t\t *\n\t\t * Receives properties:\n\t\t *\n\t\t * * `name : string?` — HTML `name` attribute.\n\t\t * * `value : string?` — The currently selected country code.\n\t\t * * `onChange(value : string?)` — Updates the `value`.\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n\t\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n\t\t * * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\n\t\t * * `disabled : boolean?` — HTML `disabled` attribute.\n\t\t * * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\n\t\t * * `className : string` — CSS class name.\n\t\t */\n\t\t//\n\t\t// (deprecated)\n\t\t// * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\n\t\t// * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\n\t\t//\n\t\tcountrySelectComponent : PropTypes.elementType.isRequired,\n\n\t\t/**\n\t\t * Country `<select/>` component props.\n\t\t */\n\t\tcountrySelectProps: PropTypes.object,\n\n\t\t/**\n\t\t * Phone number `<input/>` component.\n\t\t *\n\t\t * Receives properties:\n\t\t *\n\t\t * * `value: string` — The formatted `value`.\n\t\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n\t\t * * `onBlur(event: Event)` — Is used to toggle the `--focus` CSS class.\n\t\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\n\t\t *\n\t\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\n\t\t */\n\t\tnumberInputComponent : PropTypes.elementType.isRequired,\n\n\t\t/**\n\t\t * Phone number `<input/>` component props.\n\t\t */\n\t\tnumberInputProps: PropTypes.object,\n\n\t\t/**\n\t\t * Phone number `<input/>` component (a higher-order one).\n\t\t *\n\t\t * Receives properties:\n\t\t *\n\t\t * * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t\t * * `onChange(value? : string)` — Updates the `value`.\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n\t\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n\t\t * * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\n\t\t * * `metadata : object` — `libphonenumber-js` metadata.\n\t\t * * `inputComponent : elementType` — Phone number `<input/>` component. This is basically the `numberInputComponent` property renamed to `inputComponent`.\n\t\t * * All other properties should be passed through to the underlying `<input/>`.\n\t\t *\n\t\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\n\t\t *\n\t\t * @ignore\n\t\t */\n\t\tinputComponent : PropTypes.elementType.isRequired,\n\n\t\t/**\n\t\t * Set to `false` to use `inputComponent={InputBasic}`\n\t\t * instead of `input-format`'s `<ReactInput/>`.\n\t\t */\n\t\t// Is `false` by default.\n\t\t// smartCaret : PropTypes.bool.isRequired,\n\n\t\t/**\n\t\t * Phone number extension `<input/>` element.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t *\t`ext={<input value={...} onChange={...}/>}`\n\t\t */\n\t\text : PropTypes.node,\n\n\t\t/**\n\t\t * If set to `true` the phone number input will get trimmed\n\t\t * if it exceeds the maximum length for the country.\n\t\t */\n\t\tlimitMaxLength : PropTypes.bool.isRequired,\n\n\t\t/**\n\t\t * An error message to show below the phone number `<input/>`. For example, `\"Required\"`.\n\t\t */\n\t\terror : PropTypes.string,\n\n\t\t/**\n\t\t * The `error` is shown only when `indicateInvalid` is `true`.\n\t\t * (which is the default).\n\t\t * @deprecated\n\t\t * @ignore\n\t\t */\n\t\tindicateInvalid : PropTypes.bool,\n\n\t\t/**\n\t\t * `libphonenumber-js` metadata.\n\t\t *\n\t\t * Can be used to pass custom `libphonenumber-js` metadata\n\t\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\n\t\t */\n\t\tmetadata : metadataPropType.isRequired,\n\n\t\t/**\n\t\t * Is called every time the selected country changes:\n\t\t * either programmatically or when user selects it manually from the list.\n\t\t */\n\t\t// People have been asking for a way to get the selected country.\n\t\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n\t\t// For some it's just a \"business requirement\".\n\t\t// I guess it's about gathering as much info on the user as a website can\n\t\t// without introducing any addional fields that would complicate the form\n\t\t// therefore reducing \"conversion\" (that's a marketing term).\n\t\t// Assuming that the phone number's country is the user's country\n\t\t// is not 100% correct but in most cases I guess it's valid.\n\t\tonCountryChange : PropTypes.func,\n\n\t\t/**\n\t\t * Disables only the phone number `<input/>`.\n\t\t *\n\t\t * Some users choose to implement a digital keyboard component for phone number input.\n\t\t * In such cases the phone number input field must be disabled in order for the default system keyboard to not show up on focus.\n\t\t * At the same time, country select should not be disabled in order for the user to be able to choose their country.\n\t\t */\n\t\t// (is `false` by default)\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/215\n\t\tdisablePhoneInput : PropTypes.bool.isRequired\n\t}\n\n\tstatic defaultProps =\n\t{\n\t\t/**\n\t\t * Not disabled.\n\t\t */\n\t\tdisabled: false,\n\t\tdisablePhoneInput: false,\n\n\t\t/**\n\t\t * Show `error` (if passed).\n\t\t * @deprecated\n\t\t */\n\t\tindicateInvalid : true,\n\n\t\t/**\n\t\t * Remember (and autofill) the value as a phone number.\n\t\t */\n\t\tautoComplete: 'tel',\n\n\t\t/**\n\t\t * Flag icon component.\n\t\t */\n\t\tflagComponent: FlagComponent,\n\n\t\t/**\n\t\t * By default, use icons from `flag-icon-css` github repo.\n\t\t */\n\t\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n\t\t/**\n\t\t * Default \"International\" country `<select/>` option icon (globe).\n\t\t */\n\t\t // internationalIcon: InternationalIcon,\n\n\t\t/**\n\t\t * Phone number `<input/>` component.\n\t\t */\n\t\tnumberInputComponent: 'input',\n\n\t\t/**\n\t\t * Phone number `<input/>` component (a higher-order one).\n\t\t */\n\t\tinputComponent: InputBasic,\n\n\t\t/**\n\t\t * Show country `<select/>`.\n\t\t */\n\t\tshowCountrySelect: true,\n\n\t\t/**\n\t\t * Don't convert the initially passed phone number `value`\n\t\t * to a national phone number for its country.\n\t\t * The reason is that the newer generation grows up when\n\t\t * there are no stationary phones and therefore everyone inputs\n\t\t * phone numbers with a `+` in their smartphones\n\t\t * so phone numbers written in international form\n\t\t * are gradually being considered more natural than local ones.\n\t\t */\n\t\tdisplayInitialValueAsLocalNumber: false,\n\n\t\t/**\n\t\t * Set to `false` to use `inputComponent={InputBasic}`\n\t\t * instead of `input-format`'s `<ReactInput/>`.\n\t\t * Is `false` by default.\n\t\t */\n\t\t// smartCaret : false,\n\n\t\t/**\n\t\t * Whether to add the \"International\" option\n\t\t * to the list of countries.\n\t\t */\n\t\tinternational : true,\n\n\t\t/**\n\t\t * If set to `true` the phone number input will get trimmed\n\t\t * if it exceeds the maximum length for the country.\n\t\t */\n\t\tlimitMaxLength : false\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tconst {\n\t\t\tvalue,\n\t\t\tlabels,\n\t\t\tinternational,\n\t\t\tmetadata\n\t\t} = this.props\n\n\t\tlet {\n\t\t\tcountry,\n\t\t\tcountries,\n\t\t\tcountryOptions\n\t\t} = this.props\n\n\t\t// Validate `country`.\n\t\tif (country) {\n\t\t\tif (!this.isCountrySupportedWithError(country)) {\n\t\t\t\tcountry = undefined\n\t\t\t}\n\t\t}\n\n\t\t// Validate `countries`.\n\t\tcountries = filterCountries(countries, metadata)\n\n\t\t// Validate `countryOptions`.\n\t\tcountryOptions = filterCountryOptions(countryOptions, metadata)\n\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\n\n\t\tconst pre_selected_country = getPreSelectedCountry(\n\t\t\tphoneNumber,\n\t\t\tcountry,\n\t\t\tcountries || getCountryCodes(labels).filter(_ => _ === 'ZZ' || metadata.countries[_]),\n\t\t\tinternational,\n\t\t\tmetadata\n\t\t)\n\n\t\tthis.state =\n\t\t{\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\n\t\t\tprops : this.props,\n\n\t\t\t// The country selected.\n\t\t\tcountry : pre_selected_country,\n\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\n\t\t\t// For example, a developer might theoretically pass some unsupported\n\t\t\t// countries as part of the `countries` property, and because of that\n\t\t\t// the component uses `this.state.countries` (which are filtered)\n\t\t\t// instead of `this.props.countries`\n\t\t\t// (which could potentially contain unsupported countries).\n\t\t\tcountries,\n\n\t\t\t// Generate country `<select/>` options.\n\t\t\tcountry_select_options : generateCountrySelectOptions(countries, countryOptions, this.props),\n\n\t\t\t// `parsed_input` state property holds non-formatted user's input.\n\t\t\t// The reason is that there's no way of finding out\n\t\t\t// in which form should `value` be displayed: international or national.\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n\t\t\t// Hence storing just `value`is not sufficient for correct formatting.\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\n\t\t\t// then value is `+78005553535` and `parsed_input` is `88005553535`\n\t\t\t// and if a user entered `+7 800 555 35 35`\n\t\t\t// then value is `+78005553535` and `parsed_input` is `+78005553535`.\n\t\t\tparsed_input : generateParsedInput(value, phoneNumber, this.props),\n\n\t\t\t// `value` property is duplicated in state.\n\t\t\t// The reason is that `getDerivedStateFromProps()`\n\t\t\t// needs this `value` to compare to the new `value` property\n\t\t\t// to find out if `parsed_input` needs updating:\n\t\t\t// If the `value` property was changed externally\n\t\t\t// then it won't be equal to `state.value`\n\t\t\t// in which case `parsed_input` and `country` should be updated.\n\t\t\tvalue\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { onCountryChange } = this.props\n\t\tlet { country } = this.props\n\t\tconst { country: selectedCountry } = this.state\n\n\t\tif (onCountryChange) {\n\t\t\tif (!country || !this.isCountrySupportedWithError(country)) {\n\t\t\t\tcountry = undefined\n\t\t\t}\n\t\t\tif (selectedCountry !== country) {\n\t\t\t\tonCountryChange(selectedCountry)\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconst { onCountryChange } = this.props\n\t\t// Call `onCountryChange` when user selects another country.\n\t\tif (onCountryChange && this.state.country !== prevState.country) {\n\t\t\tonCountryChange(this.state.country)\n\t\t}\n\t}\n\n\t// A shorthand for not passing `metadata` as a second argument.\n\tisCountrySupportedWithError = (country) => {\n\t\tconst { metadata } = this.props\n\t\treturn isCountrySupportedWithError(country, metadata)\n\t}\n\n\t// Country `<select/>` `onChange` handler.\n\tonCountryChange = (new_country) =>\n\t{\n\t\tconst\n\t\t{\n\t\t\tmetadata,\n\t\t\tonChange\n\t\t}\n\t\t= this.props\n\n\t\tconst\n\t\t{\n\t\t\tparsed_input : old_parsed_input,\n\t\t\tcountry      : old_country\n\t\t}\n\t\t= this.state\n\n\t\t// After the new `country` has been selected,\n\t\t// if the phone number `<input/>` holds any digits\n\t\t// then migrate those digits for the new `country`.\n\t\tconst new_parsed_input = migrateParsedInputForNewCountry\n\t\t(\n\t\t\told_parsed_input,\n\t\t\told_country,\n\t\t\tnew_country,\n\t\t\tmetadata,\n\t\t\t// Convert to \"local\" phone number format.\n\t\t\ttrue\n\t\t)\n\n\t\tconst new_value = e164(new_parsed_input, new_country, metadata)\n\n\t\t// Focus phone number `<input/>` upon country selection.\n\t\tthis.focus()\n\n\t\t// If the user has already manually selected a country\n\t\t// then don't override that already selected country\n\t\t// if the default `country` property changes.\n\t\t// That's what `hasUserSelectedACountry` flag is for.\n\n\t\tthis.setState\n\t\t({\n\t\t\tcountry : new_country,\n\t\t\thasUserSelectedACountry : true,\n\t\t\tparsed_input : new_parsed_input,\n\t\t\tvalue : new_value\n\t\t},\n\t\t() =>\n\t\t{\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\tonChange(new_value)\n\t\t})\n\t}\n\n\t// Phone number `<input/>` `onKeyDown` handler.\n\tonPhoneNumberKeyDown = (event) =>\n\t{\n\t\tconst { onKeyDown } = this.props\n\n\t\t// Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\n\t\t// (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\n\t\t// so can't hijack \"Down arrow\" keypress here.\n\t\t// // Expand country `<select/>`` on \"Down arrow\" key press.\n\t\t// if (event.keyCode === 40) {\n\t\t// \tthis.country_select.toggle()\n\t\t// }\n\n\t\tif (onKeyDown) {\n\t\t\tonKeyDown(event)\n\t\t}\n\t}\n\n\t/**\n\t * `<input/>` `onChange()` handler.\n\t * Updates `value` property accordingly (so that they are kept in sync).\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t */\n\tonChange = (_input) =>\n\t{\n\t\tconst\n\t\t{\n\t\t\tonChange,\n\t\t\tinternational,\n\t\t\tlimitMaxLength,\n\t\t\tmetadata\n\t\t}\n\t\t= this.props\n\n\t\tconst\n\t\t{\n\t\t\tinput,\n\t\t\tcountry,\n\t\t\tvalue\n\t\t}\n\t\t= parseInput\n\t\t(\n\t\t\t_input,\n\t\t\tthis.state.parsed_input,\n\t\t\tthis.state.country,\n\t\t\tthis.state.countries,\n\t\t\tinternational,\n\t\t\tlimitMaxLength,\n\t\t\tmetadata\n\t\t)\n\n\t\tthis.setState\n\t\t({\n\t\t\tparsed_input: input,\n\t\t\tvalue,\n\t\t\tcountry\n\t\t},\n\t\t// Update the new `value` property.\n\t\t// Doing it after the `state` has been updated\n\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t() => onChange(value))\n\t}\n\n\t// Toggles the `--focus` CSS class.\n\t_onFocus = () => this.setState({ isFocused: true })\n\n\t// Toggles the `--focus` CSS class.\n\t_onBlur = () => this.setState({ isFocused: false })\n\n\tonFocus = (event) => {\n\t\tconst { onFocus } = this.props\n\t\tthis._onFocus()\n\t\tif (onFocus) {\n\t\t\tonFocus(event)\n\t\t}\n\t}\n\n\t// This `onBlur` interceptor is a workaround for `redux-form`\n\t// so that it gets the up-to-date `value` in its `onBlur` handler.\n\t// Without this fix it just gets the actual (raw) input field textual value.\n\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\n\t//\n\t// A developer is not supposed to pass this `onBlur` property manually.\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t// and this component patches that `onBlur` handler (a hacky way but works).\n\t//\n\tonBlur = (event) =>\n\t{\n\t\tconst { onBlur } = this.props\n\t\tconst { value } = this.state\n\n\t\tthis._onBlur()\n\n\t\tif (!onBlur) {\n\t\t\treturn\n\t\t}\n\n\t\t// `event` is React's `SyntheticEvent`.\n\t\t// Its `.value` is read-only therefore cloning it.\n\t\tconst _event = {\n\t\t\t...event,\n\t\t\ttarget: {\n\t\t\t\t...event.target,\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\n\t\t// For `redux-form` event detection.\n\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t_event.stopPropagation = event.stopPropagation\n\t\t_event.preventDefault  = event.preventDefault\n\n\t\treturn onBlur(_event)\n\t}\n\n\t// When country `<select/>` is toggled.\n\thidePhoneInputField = (hide) => {\n\t\tthis.setState({\n\t\t\thidePhoneInputField: hide\n\t\t})\n\t}\n\n\t// Can be called externally.\n\tfocus = () => this.number_input.focus()\n\n\tstoreCountrySelectInstance = _ => this.country_select = _\n\n\tstorePhoneNumberInputInstance = _ => this.number_input = _\n\n\t// `state` holds previous props as `props`, and also:\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n\t// * `parsed_input` — The parsed `<input/>` value, e.g. `8005553535`.\n\t// (and a couple of other less significant properties)\n\tstatic getDerivedStateFromProps(props, state) {\n\t\tconst {\n\t\t\tcountry,\n\t\t\thasUserSelectedACountry,\n\t\t\tvalue,\n\t\t\tprops: {\n\t\t\t\tcountry : old_default_country,\n\t\t\t\tvalue   : old_value\n\t\t\t}\n\t\t} = state\n\n\t\tconst {\n\t\t\tmetadata,\n\t\t\tcountries,\n\t\t\tcountry : new_default_country,\n\t\t\tvalue   : new_value\n\t\t} = props\n\n\t\tconst new_state = {\n\t\t\t// Emulate `prevProps` via `state.props`.\n\t\t\tprops,\n\t\t\t// If the user has already manually selected a country\n\t\t\t// then don't override that already selected country\n\t\t\t// if the default `country` property changes.\n\t\t\t// That's what `hasUserSelectedACountry` flag is for.\n\t\t\thasUserSelectedACountry\n\t\t}\n\n\t\t// If `countries` or `labels` or `international` changed\n\t\t// then re-generate country `<select/>` options.\n\t\tif (props.countries !== state.props.countries ||\n\t\t\tprops.labels !== state.props.labels ||\n\t\t\tprops.international !== state.props.international) {\n\t\t\t// Re-generate country select options.\n\t\t\tnew_state.country_select_options = generateCountrySelectOptions(\n\t\t\t\tfilterCountries(props.countries, metadata),\n\t\t\t\tfilterCountryOptions(props.countryOptions, metadata),\n\t\t\t\tprops\n\t\t\t)\n\t\t}\n\n\t\t// If the default country changed.\n\t\t// (e.g. in case of ajax GeoIP detection after page loaded)\n\t\t// then select it but only if the user hasn't already manually\n\t\t// selected a country and no phone number has been entered so far.\n\t\t// Because if the user has already started inputting a phone number\n\t\t// then he's okay with no country being selected at all (\"International\")\n\t\t// and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\t\tif (new_default_country !== old_default_country &&\n\t\t\t!hasUserSelectedACountry && !value && !new_value) {\n\t\t\treturn {\n\t\t\t\t...new_state,\n\t\t\t\tcountry: isCountrySupportedWithError(new_default_country, metadata) ? new_default_country : old_default_country\n\t\t\t\t// `value` is `undefined`.\n\t\t\t\t// `parsed_input` is `undefined` because `value` is `undefined`.\n\t\t\t}\n\t\t}\n\t\t// If a new `value` is set externally.\n\t\t// (e.g. as a result of an ajax API request\n\t\t//  to get user's phone after page loaded)\n\t\t// The first part — `new_value !== old_value` —\n\t\t// is basically `props.value !== prevProps.value`\n\t\t// so it means \"if value property was changed externally\".\n\t\t// The second part — `new_value !== value` —\n\t\t// is for ignoring the `getDerivedStateFromProps()` call\n\t\t// which happens in `this.onChange()` right after `this.setState()`.\n\t\t// If this `getDerivedStateFromProps()` call isn't ignored\n\t\t// then the country flag would reset on each input.\n\t\telse if (new_value !== old_value && new_value !== value) {\n\t\t\tconst phoneNumber = parsePhoneNumber(new_value, metadata)\n\t\t\tlet parsedCountry\n\t\t\tif (phoneNumber) {\n\t\t\t\tconst countries = filterCountries(props.countries, metadata)\n\t\t\t\tif (!countries || countries.indexOf(phoneNumber.country) >= 0) {\n\t\t\t\t\tparsedCountry = phoneNumber.country\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...new_state,\n\t\t\t\tparsed_input : generateParsedInput(new_value, phoneNumber, props),\n\t\t\t\tvalue : new_value,\n\t\t\t\tcountry : new_value ? parsedCountry : country\n\t\t\t}\n\t\t}\n\n\t\t// `country` didn't change.\n\t\t// `value` didn't change.\n\t\t// `parsed_input` didn't change, because `value` didn't change.\n\t\t//\n\t\t// Maybe `new_state.country_select_options` changed.\n\t\t// In any case, update `prevProps`.\n\t\treturn new_state\n\t}\n\n\trender()\n\t{\n\t\tconst\n\t\t{\n\t\t\tname,\n\t\t\tdisabled,\n\t\t\tdisablePhoneInput,\n\t\t\tautoComplete,\n\t\t\tcountrySelectTabIndex,\n\t\t\tshowCountrySelect,\n\t\t\tstyle,\n\t\t\tclassName,\n\t\t\tinputClassName,\n\t\t\tgetInputClassName,\n\t\t\tcountrySelectAriaLabel,\n\t\t\tcountrySelectProperties,\n\n\t\t\terror,\n\t\t\tindicateInvalid,\n\n\t\t\tcountrySelectComponent: CountrySelectComponent,\n\t\t\tcountrySelectProps,\n\t\t\tinputComponent: InputComponent,\n\t\t\tnumberInputComponent: inputComponent,\n\t\t\tnumberInputProps,\n\t\t\t// smartCaret,\n\t\t\text,\n\n\t\t\t// Extract `phoneNumberInputProps` via \"object rest spread\":\n\t\t\tcountry : _,\n\t\t\tcountries,\n\t\t\tcountryOptions,\n\t\t\tlabels,\n\t\t\tflags,\n\t\t\tflagComponent,\n\t\t\tflagsPath,\n\t\t\tinternational,\n\t\t\tinternationalIcon,\n\t\t\tdisplayInitialValueAsLocalNumber,\n\t\t\tonCountryChange,\n\t\t\tlimitMaxLength,\n\t\t\tmetadata,\n\t\t\t...phoneNumberInputProps\n\t\t}\n\t\t= this.props\n\n\t\tconst\n\t\t{\n\t\t\tcountry,\n\t\t\thidePhoneInputField,\n\t\t\tcountry_select_options,\n\t\t\tparsed_input,\n\t\t\tisFocused\n\t\t}\n\t\t= this.state\n\n\t\t// const InputComponent = InputComponent || (smartCaret ? InputSmart : InputBasic)\n\n\t\t// Extract `countrySelectProperties` from `this.props`\n\t\t// also removing them from `phoneNumberInputProps`.\n\t\tconst _countrySelectProps = {}\n\t\tif (countrySelectProperties)\n\t\t{\n\t\t\tfor (const key in countrySelectProperties)\n\t\t\t{\n\t\t\t\tif (this.props.hasOwnProperty(key))\n\t\t\t\t{\n\t\t\t\t\t_countrySelectProps[countrySelectProperties[key]] = this.props[key]\n\t\t\t\t\tdelete phoneNumberInputProps[key]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Could use something like `aria-label={labels.phone}` on the `<InputComponent/>`,\n\t\t// however, some users may have already been using this component with one of:\n\t\t// * `<label/>` container\n\t\t// * `aria-labelledby`\n\t\t// * `id` and `<label for/>`\n\t\t// https://developers.google.com/web/fundamentals/accessibility/semantics-aria/aria-labels-and-relationships\n\t\t// Maybe in some future major version update.\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={ style }\n\t\t\t\tclassName={ classNames('react-phone-number-input',\n\t\t\t\t{\n\t\t\t\t\t'react-phone-number-input--focus'   : isFocused,\n\t\t\t\t\t'react-phone-number-input--invalid' : error && indicateInvalid\n\t\t\t\t},\n\t\t\t\tclassName) }>\n\n\t\t\t\t{/* Country `<select/>` and phone number `<input/>` */}\n\t\t\t\t<div className=\"react-phone-number-input__row\">\n\n\t\t\t\t\t{/* Country `<select/>` */}\n\t\t\t\t\t{ showCountrySelect &&\n\t\t\t\t\t\t<CountrySelectComponent\n\t\t\t\t\t\t\t{..._countrySelectProps}\n\t\t\t\t\t\t\tref={ this.storeCountrySelectInstance }\n\t\t\t\t\t\t\tname={ name ? `${name}__country` : undefined }\n\t\t\t\t\t\t\taria-label={ countrySelectAriaLabel || labels.country }\n\t\t\t\t\t\t\ttabIndex={ countrySelectTabIndex }\n\t\t\t\t\t\t\t{...countrySelectProps}\n\t\t\t\t\t\t\tvalue={ country }\n\t\t\t\t\t\t\toptions={ country_select_options }\n\t\t\t\t\t\t\tonChange={ this.onCountryChange }\n\t\t\t\t\t\t\tonFocus={ this._onFocus }\n\t\t\t\t\t\t\tonBlur={ this._onBlur }\n\t\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\t\thidePhoneInputField={ this.hidePhoneInputField }\n\t\t\t\t\t\t\tfocusPhoneInputField={ this.focus }\n\t\t\t\t\t\t\tclassName=\"react-phone-number-input__country\"/>\n\t\t\t\t\t}\n\n\t\t\t\t\t{/* Phone number `<input/>` */}\n\t\t\t\t\t{ !hidePhoneInputField &&\n\t\t\t\t\t\t<InputComponent\n\t\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\t\tautoComplete={ autoComplete }\n\t\t\t\t\t\t\t{...numberInputProps}\n\t\t\t\t\t\t\t{...phoneNumberInputProps}\n\t\t\t\t\t\t\tname={ name }\n\t\t\t\t\t\t\tmetadata={ metadata }\n\t\t\t\t\t\t\tcountry={ country }\n\t\t\t\t\t\t\tvalue={ parsed_input || '' }\n\t\t\t\t\t\t\tonChange={ this.onChange }\n\t\t\t\t\t\t\tonFocus={ this.onFocus }\n\t\t\t\t\t\t\tonBlur={ this.onBlur }\n\t\t\t\t\t\t\tonKeyDown={ this.onPhoneNumberKeyDown }\n\t\t\t\t\t\t\tdisabled={ disabled || disablePhoneInput }\n\t\t\t\t\t\t\tinputComponent={ inputComponent }\n\t\t\t\t\t\t\tclassName={ classNames\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t'react-phone-number-input__input',\n\t\t\t\t\t\t\t\t'react-phone-number-input__phone',\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled || disablePhoneInput,\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--invalid'  : error && indicateInvalid\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tinputClassName,\n\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({\n\t\t\t\t\t\t\t\t\tdisabled: disabled || disablePhoneInput,\n\t\t\t\t\t\t\t\t\tinvalid: error && indicateInvalid\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t) }/>\n\t\t\t\t\t}\n\n\t\t\t\t\t{/* Phone extension `<input/>` */}\n\t\t\t\t\t{ ext && !hidePhoneInputField &&\n\t\t\t\t\t\t<label className=\"react-phone-number-input__ext\">\n\t\t\t\t\t\t\t{labels.ext}\n\t\t\t\t\t\t\t{React.cloneElement(ext,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tonChange : ext.props.onChange ? (event) => ext.props.onChange(parseExtDigits(event)) : undefined,\n\t\t\t\t\t\t\t\tonFocus : this._onFocus,\n\t\t\t\t\t\t\t\tonBlur : this._onBlur,\n\t\t\t\t\t\t\t\tclassName : classNames\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input',\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__ext-input',\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled || disablePhoneInput,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tinputClassName,\n\t\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({\n\t\t\t\t\t\t\t\t\t\tdisabled: disabled || disablePhoneInput\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\text.props.className\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</label>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\n\t\t\t\t{/* Error message */}\n\t\t\t\t{ error && indicateInvalid &&\n\t\t\t\t\t<div className=\"react-phone-number-input__error\">\n\t\t\t\t\t\t{ error }\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n// Generates country `<select/>` options.\nfunction generateCountrySelectOptions(countries, countryOptions, props) {\n\tconst {\n\t\tlabels,\n\t\tinternational,\n\t\tmetadata\n\t} = props\n\n\tconst CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props)\n\n\treturn transformCountryOptions(\n\t\tgetCountrySelectOptions(\n\t\t\tcountries || getCountryCodes(labels).filter(country => country === 'ZZ' || isCountrySupported(country, metadata)),\n\t\t\tlabels,\n\t\t\tinternational\n\t\t).map(({ value, label }) => ({\n\t\t\tvalue,\n\t\t\tlabel,\n\t\t\ticon: CountrySelectOptionIcon\n\t\t})),\n\t\tcountryOptions\n\t)\n}\n\nfunction createCountrySelectOptionIconComponent(props)\n{\n\tconst\n\t{\n\t\tflags,\n\t\tflagsPath,\n\t\tflagComponent : FlagComponent,\n\t\tinternationalIcon : InternationalIcon\n\t}\n\t= props\n\n\treturn ({ value }) => (\n\t\t<div\n\t\t\tclassName={classNames('react-phone-number-input__icon',\n\t\t\t{\n\t\t\t\t'react-phone-number-input__icon--international': value === undefined\n\t\t\t})}>\n\t\t\t{\n\t\t\t\tvalue\n\t\t\t\t?\n\t\t\t\t<FlagComponent\n\t\t\t\t\tcountry={value}\n\t\t\t\t\tflags={flags}\n\t\t\t\t\tflagsPath={flagsPath}/>\n\t\t\t\t:\n\t\t\t\t<InternationalIcon/>\n\t\t\t}\n\t\t</div>\n\t)\n}\n\n// Can move some country `<select/>` options\n// to the top of the list, for example.\n// See `countryOptions` property.\nfunction transformCountryOptions(options, transform)\n{\n\tif (!transform) {\n\t\treturn options\n\t}\n\n\tconst optionsOnTop = []\n\tconst optionsOnBottom = []\n\tlet appendTo = optionsOnTop\n\n\tfor (const element of transform)\n\t{\n\t\tif (element === '|')\n\t\t{\n\t\t\tappendTo.push({ divider: true })\n\t\t}\n\t\telse if (element === '...' || element === '…')\n\t\t{\n\t\t\tappendTo = optionsOnBottom\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Find the position of the option.\n\t\t\tconst index = options.indexOf(options.filter(option => option.value === element)[0])\n\t\t\t// Get the option.\n\t\t\tconst option = options[index]\n\t\t\t// Remove the option from its default position.\n\t\t\toptions.splice(index, 1)\n\t\t\t// Add the option on top.\n\t\t\tappendTo.push(option)\n\t\t}\n\t}\n\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom)\n}\n\nfunction generateParsedInput(value, phoneNumber, props)\n{\n\tconst { displayInitialValueAsLocalNumber } = props\n\n\t// If the `value` (E.164 phone number)\n\t// belongs to the currently selected country\n\t// and `displayInitialValueAsLocalNumber` property is `true`\n\t// then convert `value` (E.164 phone number)\n\t// to a local phone number digits.\n\t// E.g. '+78005553535' -> '88005553535'.\n\tif (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\n\t\treturn generateNationalNumberDigits(phoneNumber)\n\t}\n\n\treturn value\n}\n\nfunction isCountrySupported(country, metadata) {\n\treturn metadata.countries.hasOwnProperty(country)\n}\n\nfunction isCountrySupportedWithError(country, metadata) {\n\tif (isCountrySupported(country, metadata)) {\n\t\treturn true\n\t} else {\n\t\tconsole.error(`Country not found: ${country}`)\n\t\treturn false\n\t}\n}\n\nfunction isCountryOptionSupportedWithError(countryOption, metadata) {\n\tswitch (countryOption) {\n\t\tcase '|':\n\t\tcase '...':\n\t\tcase '…':\n\t\t\treturn true\n\t\tdefault:\n\t\t\treturn isCountrySupportedWithError(countryOption, metadata)\n\t}\n}\n\nfunction filterCountries(countries, metadata) {\n\tif (countries) {\n\t\tcountries = countries.filter(country => isCountrySupportedWithError(country, metadata))\n\t\tif (countries.length === 0) {\n\t\t\tcountries = undefined\n\t\t}\n\t}\n\treturn countries\n}\n\nfunction filterCountryOptions(countryOptions, metadata) {\n\tif (countryOptions) {\n\t\tcountryOptions = countryOptions.filter(countryOption => isCountryOptionSupportedWithError(countryOption, metadata))\n\t\tif (countryOptions.length === 0) {\n\t\t\tcountryOptions = undefined\n\t\t}\n\t}\n\treturn countryOptions\n}\n\nfunction parseExtDigits(event) {\n\tif (event) {\n\t\tif (typeof event === 'string') {\n\t\t\tevent = parseDigits(event)\n\t\t} else if (event.target && event.target.value) {\n\t\t\tevent.target.value = parseDigits(event.target.value)\n\t\t}\n\t}\n\treturn event\n}\n"]}